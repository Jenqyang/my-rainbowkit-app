import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { useState, useRef, useEffect, ChangeEvent } from 'react';

interface FileItem {
  id: string;
  name: string;
  ipfsHash: string;
  size: number;
  datePinned: string;
  url: string;
}

// 格式化文件大小
const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

const Home: NextPage = () => {
  const [file, setFile] = useState<File | null>(null);
  const [fileUrl, setFileUrl] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [fileType, setFileType] = useState<string>('');
  const [filesList, setFilesList] = useState<FileItem[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const mediaRef = useRef<HTMLAudioElement | HTMLImageElement | HTMLVideoElement | null>(null);
  
  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      const selectedFile = files[0];
      setFile(selectedFile);
      setFileType(selectedFile.type);
      
      // Create a URL for the file preview
      const url = URL.createObjectURL(selectedFile);
      setFileUrl(url);
    }
  };
  
  // 获取文件列表
  const fetchFiles = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/files');
      if (!response.ok) {
        throw new Error('Failed to fetch files');
      }
      const data = await response.json();
      setFilesList(data);
    } catch (error) {
      console.error('Error fetching files:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // 页面加载时获取文件列表
  useEffect(() => {
    fetchFiles();
  }, []);
  
  const handleUpload = async () => {
    if (!file) return;
    
    setIsUploading(true);
    setUploadProgress(0);
    
    // Show upload progress
    const interval = setInterval(() => {
      setUploadProgress(prev => {
        if (prev >= 95) {
          clearInterval(interval);
          return 95;
        }
        return prev + 5;
      });
    }, 300);
    
    try {
      // Upload file to Pinata through our API route
      const formData = new FormData();
      formData.append('file', file);
      
      const response = await fetch('/api/files', {
        method: 'POST',
        body: formData,
      });
      
      if (!response.ok) {
        throw new Error('Upload failed');
      }
      
      // Get the Pinata URL from the response
      const pinataUrl = await response.json();
      
      clearInterval(interval);
      setUploadProgress(100);
      setFileUrl(pinataUrl); // Update the file URL to the Pinata URL
      alert('File uploaded successfully to IPFS via Pinata!');
      
      // 刷新文件列表
      fetchFiles();
    } catch (error) {
      console.error('Error uploading file:', error);
      alert('Failed to upload file');
    } finally {
      setIsUploading(false);
    }
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />
        
        <div className="mt-10 w-full max-w-md">
          <h2 className="text-2xl font-bold mb-4">IPFS File Upload with Pinata</h2>
          
          {/* 文件列表 */}
          <div className="mb-6">
            <h3 className="text-xl font-semibold mb-2">已上传文件</h3>
            {isLoading ? (
              <div className="flex justify-center items-center py-4">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
              </div>
            ) : filesList.length > 0 ? (
              <div className="border rounded-lg overflow-hidden">
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">文件名</th>
                        <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">CID</th>
                        <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">大小</th>
                        <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">上传时间</th>
                        <th scope="col" className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">操作</th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {filesList.map((item) => (
                        <tr key={item.id} className="hover:bg-gray-50">
                          <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900 truncate max-w-[150px]">{item.name}</td>
                          <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500 truncate max-w-[150px]" title={item.ipfsHash}>
                            <span className="font-mono">{item.ipfsHash.substring(0, 6)}...{item.ipfsHash.substring(item.ipfsHash.length - 4)}</span>
                            <button 
                              onClick={() => {navigator.clipboard.writeText(item.ipfsHash); alert('CID 已复制到剪贴板');}}
                              className="ml-2 text-blue-500 hover:text-blue-700"
                              title="复制完整 CID"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 inline" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                              </svg>
                            </button>
                          </td>
                          <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">{formatFileSize(item.size)}</td>
                          <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">{new Date(item.datePinned).toLocaleString()}</td>
                          <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                            <a 
                              href={item.url} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="text-blue-600 hover:text-blue-800 hover:underline"
                            >
                              查看
                            </a>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            ) : (
              <div className="text-center py-4 text-gray-500 border rounded-lg">
                暂无上传文件
              </div>
            )}
          </div>
          
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 mb-4 hover:border-blue-500 transition-colors">
            <input
              type="file"
              onChange={handleFileChange}
              className="hidden"
              id="file-upload"
              disabled={isUploading}
            />
            <label
              htmlFor="file-upload"
              className="flex flex-col items-center justify-center cursor-pointer"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-gray-400 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 11v6m0 0l-4-4m4 4l4-4m-4-7a9 9 0 00-9 9h18a9 9 0 00-9-9z" />
              </svg>
              <span className="text-sm text-gray-500">
                {file ? file.name : 'Select a file to upload'}
              </span>
              <span className="text-xs text-gray-400 mt-1">
                Upload any file to IPFS via Pinata
              </span>
            </label>
          </div>
          
          {fileUrl && (
            <div className="mb-4">
              <p className="text-sm font-medium mb-2">Preview:</p>
              {fileType.startsWith('image/') ? (
                <img 
                  src={fileUrl} 
                  alt="Uploaded file" 
                  className="w-full rounded-lg max-h-64 object-contain" 
                />
              ) : fileType.startsWith('audio/') ? (
                <audio
                  controls
                  src={fileUrl}
                  className="w-full"
                />
              ) : fileType.startsWith('video/') ? (
                <video
                  controls
                  src={fileUrl}
                  className="w-full max-h-64"
                />
              ) : (
                <div className="p-4 bg-gray-100 rounded-lg">
                  <p className="text-sm">File uploaded: <a href={fileUrl} target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline">{file?.name}</a></p>
                </div>
              )}
            </div>
          )}
          
          {isUploading ? (
            <div className="w-full">
              <div className="w-full bg-gray-200 rounded-full h-2.5">
                <div
                  className="bg-blue-600 h-2.5 rounded-full transition-all duration-300"
                  style={{ width: `${uploadProgress}%` }}
                ></div>
              </div>
              <p className="text-sm text-center mt-2">{uploadProgress}% Uploaded</p>
            </div>
          ) : (
            <button
              onClick={handleUpload}
              disabled={!file}
              className={`w-full py-2 px-4 rounded-md ${file ? 'bg-blue-600 hover:bg-blue-700 text-white' : 'bg-gray-300 text-gray-500 cursor-not-allowed'} transition-colors`}
            >
              Upload to IPFS
            </button>
          )}
        </div>
      </main>

      <footer className={styles.footer}>
        <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
          Made with ❤️ by your frens at 🌈
        </a>
      </footer>
    </div>
  );
};

export default Home;
